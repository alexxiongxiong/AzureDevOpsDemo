# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


# trigger:
#   branches:
#     include:
#     - master
#   paths:
#     include:
#     - deploy/kubernetes-templates

trigger:
- none

variables:
  containerRegistry: 'alexrampuptest'
  imagerepository: 'alexramuptest20230209'
  tag: $(Build.BuildId)
  vmImageName: 'ubuntu-latest'

stages:
  - stage: Build 
    displayName: Build stage  
    jobs:
    - job: Build
      displayName: Build
      pool:
        vmImage: $(vmImageName)
      steps:

##Use bash to configure DevOps agent
      - task: Bash@3
        inputs:
          filePath: 'EnvironmentSetting/Preinstall_Package.sh'

##Use docker to build image and push into acr
      - task: Docker@2
        displayName: Build and push an image to container registry
        inputs:
          containerRegistry: '$(containerRegistry)'
          repository: '$(imagerepository)'
          command: 'buildAndPush'
          Dockerfile: '**/Dockerfile'
          tags: |
            $(tag)

##run deploy stage manually
  - stage: ManualApprovalbeforedeploy
    dependsOn: Build
    jobs: 
    - job: ManualApprovalJob
      displayName: Manual Approval (Agentless job)
      pool: server
      steps:
      - task: ManualValidation@0
        displayName: Manual Validation
        inputs:
          notifyUsers: 'xinhaoxiong@microsoft.com'

  - stage: Deploy
    displayName: Deploy stage
    dependsOn: ManualApprovalbeforedeploy
    jobs:
    - deployment: Deploy
      displayName: Deploy job
      pool:
        vmImage: $(vmImageName)
      environment: 'myenv.azuredevopsapp' #customize with your environment
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self

#Check whether the deployment has been existing in the AKS; if yes, delete it.
            - task: KubectlInstaller@0
              inputs:
                kubectlVersion: 'latest'
            - task: AzureCLI@2
              inputs:
                azureSubscription: 'Microsoft Azure Internal Consumption(4728f3f2-8386-4527-ae25-60e3318585a0)'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: 'az account set --subscription 4728f3f2-8386-4527-ae25-60e3318585a0; az aks get-credentials --resource-group CNIAKS --name cniaks --admin;'
            - task: Bash@3
              inputs:
                filePath: 'EnvironmentSetting/check_deployment_existing.sh'

# deploy application into AKS
            - task: KubernetesManifest@0
              inputs:
                action: 'deploy'
                kubernetesServiceConnection: 'cniaks-admin-kubeconfig'
                namespace: 'azuredevopsapp'
                manifests: |
                  $(Build.SourcesDirectory)/manifests/deployment.yaml
                  $(Build.SourcesDirectory)/manifests/service.yaml
                containers : |
                  $(containerRegistry).azurecr.io/$(imageRepository):$(tag)
                rolloutStatusTimeout: 120
              
  #           - task: KubernetesManifest@0
  #             displayName: Create imagePullSecret
  #             inputs:
  #               action: createSecret
  #               secretName: $(imagePullSecret)
  #               namespace: $(k8sNamespace)
  #               dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

  #           - task: KubernetesManifest@0
  #             displayName: Deploy to Kubernetes cluster
  #             inputs:
  #               action: deploy
  #               namespace: $(k8sNamespace)
  #               manifests: |
  #                 $(System.ArtifactsDirectory)/manifests/deployment.yml
  #                 $(System.ArtifactsDirectory)/manifests/service.yml
  #               imagePullSecrets: |
  #                 $(imagePullSecret)
  #               containers: |
  #                 $(containerRegistry)/$(imageRepository):$(tag)