# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


trigger:
- none

variables:
  containerRegistry: 'AlexRampUpTest'
  imagerepository: 'alexramuptest20230209'
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'

stages:
  - stage: Build 
    displayName: Build stage  
    jobs:
    - job: Build
      displayName: Build
      pool:
        vmImage: $(vmImageName)
      steps:

##Use bash to configure DevOps agent
      - task: Bash@3
        inputs:
          filePath: 'EnvironmentSetting/Preinstall_Package.sh'

##Use docker to build image and push into acr
      - task: Docker@2
        displayName: Build and push an image to container registry
        inputs:
          containerRegistry: '$(containerRegistry)'
          repository: '$(imagerepository)'
          command: 'buildAndPush'
          Dockerfile: '**/Dockerfile'
          tags: |
            $(tag)
      - task: PublishPipelineArtifact@1
        inputs:
          artifactName: 'manifests'
          path: 'manifests'

  - stage: Deploy
    displayName: Deploy stage
    dependsOn: Build
    jobs:
    - deployment: Deploy
      displayName: Deploy job
      pool:
        vmImage: $(vmImageName)
      environment: 'myenv.azuredevopsapp' #customize with your environment
      strategy:
        runOnce:
          deploy:
            steps:
            # - task: DownloadPipelineArtifact@2
            #   inputs:
            #     artifactName: 'manifests'
            #     downloadPath: '$(System.ArtifactsDirectory)/manifests'
            - task: KubernetesManifest@0
              inputs:
                action: 'deploy'
                kubernetesServiceConnection: 'cniaks-admin-kubeconfig'
                namespace: 'azuredevopsapp'
                manifests: |
                  manifests/deployment.yml
                  manifests/service.yml
                containers: |
                  $(containerRegistry).azurecr.io/$(imageRepository):$(tag)

  #           - task: KubernetesManifest@0
  #             displayName: Create imagePullSecret
  #             inputs:
  #               action: createSecret
  #               secretName: $(imagePullSecret)
  #               namespace: $(k8sNamespace)
  #               dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

  #           - task: KubernetesManifest@0
  #             displayName: Deploy to Kubernetes cluster
  #             inputs:
  #               action: deploy
  #               namespace: $(k8sNamespace)
  #               manifests: |
  #                 $(System.ArtifactsDirectory)/manifests/deployment.yml
  #                 $(System.ArtifactsDirectory)/manifests/service.yml
  #               imagePullSecrets: |
  #                 $(imagePullSecret)
  #               containers: |
  #                 $(containerRegistry)/$(imageRepository):$(tag)